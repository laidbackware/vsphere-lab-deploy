---
- name: Deploy VC and Hosts
  hosts: localhost
  gather_facts: False
  pre_tasks:
    - name: Ensure xorriso is installed
      package:
        name: xorriso
        state: present  
  tasks:

    - name: Deploy Nested vESXi VMs
      nestedESXi:
        vcenter: "{{ parent_vcenter.ip }}"
        vmname: "{{ environment_tag }}-{{ item.key }}"
        vcenter_user: "{{ parent_vcenter.user }}" 
        vcenter_passwd: "{{ parent_vcenter.password }}" 
        cluster: "{{ nested_clusters[item.value.nested_cluster].parent_cluster }}"
        datastore: "{{ parent_vcenter.datastore }}" 
        vmnic_physical_portgroup_assignment: "{{ nested_clusters[item.value.nested_cluster].vmnic_physical_portgroup_assignment }}"
        
        cpucount: "{{ nested_clusters[item.value.nested_cluster].cpu_cores }}"
        memory: "{{ nested_clusters[item.value.nested_cluster].ram_in_gb }}"
        # hdd: "{{ item.value.hdd }}"
        disk_sizes_in_gb: "{{ nested_clusters[item.value.nested_cluster].disk_sizes_in_gb }}"
        isopath: "ESXI-ISO/custom-esx-{{ vsphere_version }}.iso"
        esxi_version: "{{ vsphere_version }}" 
      with_dict: "{{ nested_hosts }}"
      async: 7200
      poll: 0
      register: hosts
      
    - name: Check if vCenter already exists so install steps can be skipped
      uri:
        url: "https://{{ nested_vcenter.ip }}/ui/"
        method: GET
        status_code: 200
        timeout: 2
        validate_certs: False
      ignore_errors: True
      register: vcenter_response

    - set_fact:
        vcenter_exists={{vcenter_response.status == 200}}

    - name: Fix permissions before delete
      command: chmod -R +w {{tmp_dir}}/VCSA
      ignore_errors: yes
      when: not vcenter_exists

    - name: Clean VCSA ISO Directory
      file:
        path: '{{tmp_dir}}/VCSA'
        state: absent
      when: not vcenter_exists

    - name: Extract VCSA ISO image
      command: xorriso -ecma119_map lowercase -osirrox on -indev {{vcIso}} -extract / {{tmp_dir}}/VCSA
      when: not vcenter_exists

    - name: Fix VCSA directory permissions
      command: "{{item}}"
      with_items:
        - chmod -R 777 {{tmp_dir}}/VCSA
      when: not vcenter_exists

    - name: Create JSON template file for VCSA 6.5 with embeded PSC
      template: 
        src=../templates/embedded_vCSA_on_VC_6.5.json
        dest={{tmp_dir}}/vCSA_on_ESXi.json
      when: vcIso is search("-6.5.") and not vcenter_exists
    
    - name: Create JSON template file for VCSA 6.7 with embeded PSC
      template: 
        src=../templates/embedded_vCSA_on_VC_6.7.json
        dest={{tmp_dir}}/vCSA_on_ESXi.json
      when: vcIso is search("-6.7.") and not vcenter_exists

    - name: Create JSON template file for VCSA 7.0 with embeded PSC
      template: 
        src=../templates/embedded_vCSA_on_VC_7.0.json
        dest={{tmp_dir}}/vCSA_on_ESXi.json
      when: vcIso is search("-7.0.") and not vcenter_exists

    - name: Perform VC CLI Install
      command: "./vcsa-deploy install --accept-eula --no-esx-ssl-verify {{tmp_dir}}/vCSA_on_ESXi.json"
      args:
        chdir: '{{tmp_dir}}/VCSA/vcsa-cli-installer/lin64/'
      when: not vcenter_exists
      async: 3600
      poll: 0
      register: vcenter_result

    - name: Result check for deployment of host
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      with_items: "{{ hosts.results }}"
      retries: 100
      delay: 15

    - name: Remove Nested vESXi CDROM
      vmware_guest:
        hostname: "{{ parent_vcenter.ip }}"
        username: "{{ parent_vcenter.user }}" 
        password: "{{ parent_vcenter.password }}" 
        validate_certs: no
        name: "{{ environment_tag }}-{{ item.key }}"
        cdrom:
          type: client
      with_dict: "{{ nested_hosts }}"

    - debug: msg="The vCenter deployment can take a long time.\nYou can check progress at https://{{nested_vcenter.ip}}:5480 after about 20 minutes.\nFor detailed output browse to the most recent folder starting with vcsaCliInstaller under {{tmp_dir}} and follow vcsa-cli-installer.log "
      when: not vcenter_exists

    - name: Result check for deployment of vCenter task
      async_status:
        jid: "{{ vcenter_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished      
      retries: 240
      delay: 15
      when: not vcenter_exists

    - name: Check the vSphere API is online
      command: "curl -k --silent -v https://{{ nested_vcenter.ip }}/ui/"
      register: result
      until: result.stdout.find("<title>vSphere Client</title>") != -1
      retries: 120
      delay: 5
      changed_when: false
      when: not vcenter_exists

    - name: Wait 30 seconds for the vCenter to settle
      pause: seconds=30
      when: not vcenter_exists
    
    - name: Create Datacenter
      vmware_datacenter:
        hostname: "{{ nested_vcenter.ip }}"
        username: "administrator@vsphere.local"
        password: "{{ nested_vcenter.password }}"
        datacenter_name: "{{ nested_vcenter.datacenter }}"
        state: present
        validate_certs: False
        
    - name: Create Clusters
      vmware_cluster:
        hostname: "{{ nested_vcenter.ip }}"
        username: "{{ nested_vcenter.user }}"
        password: "{{ nested_vcenter.password }}"
        datacenter_name: "{{ nested_vcenter.datacenter }}"
        cluster_name: "{{ item.key }}"
        validate_certs: False
        enable_ha: False 
        enable_drs: "{{ item.value.drs }}"
        enable_vsan: False
      with_dict: "{{ nested_clusters }}"

  post_tasks:
    - name: Delete the temporary JSON template file
      file: 
        path: '{{tmp_dir}}/vCSA_on_ESXi.json' 
        state: absent

    - name: Clean VCSA ISO Directory
      file:
        path: '{{tmp_dir}}/VCSA/'
        state: absent
